/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.csci;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Collections;
import java.util.Vector;
import java.util.regex.Pattern;
import java.io.File;

/**
 *
 * @author Shea
 */
public class MainGUI extends javax.swing.JFrame {

    javax.swing.JLabel jTitle;
    javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jConsole;
    javax.swing.JScrollPane jScrollPane2;
    javax.swing.JTree jRemoteTree;
    javax.swing.JScrollPane jScrollPane3;
    javax.swing.JTree jLocalTree;
    javax.swing.JButton jLocalCopyBtn;
    javax.swing.JButton jLocalPasteBtn;
    javax.swing.JButton jLocalChangeDirBtn;
    javax.swing.JButton jLocalDeleteBtn;
    javax.swing.JButton jCopyBtn;
    javax.swing.JButton jPasteBtn;
    javax.swing.JButton jChangeDirBtn;
    javax.swing.JButton jDeleteBtn;
    javax.swing.JButton jRefreshBtn;
    javax.swing.JLabel jLocalLabel;
    javax.swing.JLabel jRemoteLabel;
    javax.swing.JMenuBar jMainMenu;
    javax.swing.JMenu jFileMenu;
    javax.swing.JMenuItem jConnectItem;
    javax.swing.JMenuItem jDisconnectItem;
    javax.swing.JMenu jExitBtn;

    public String localFileCopy;
    public String remoteFileCopy;

    File localFile;
    File remoteFile;

    Pattern ipRegex = Pattern.compile("^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$");
    Pattern portRegex = Pattern.compile("^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$");
    Pattern fileRegex = Pattern.compile("^([A-Z])");
    /**
     * Creates new form NewJFrame
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    public void initComponents() {

        jTitle = new JLabel();
        jScrollPane1 = new JScrollPane();
        jConsole = new JTextArea();
        jScrollPane2 = new JScrollPane();
        jRemoteTree = new JTree();
        jScrollPane3 = new JScrollPane();
        jLocalTree = new JTree();
        jLocalCopyBtn = new JButton();
        jLocalPasteBtn = new JButton();
        jLocalChangeDirBtn = new JButton();
        jLocalDeleteBtn = new JButton();
        jCopyBtn = new JButton();
        jPasteBtn = new JButton();
        jChangeDirBtn = new JButton();
        jDeleteBtn = new JButton();
        jRefreshBtn = new JButton();
        jLocalLabel = new JLabel();
        jRemoteLabel = new JLabel();
        jMainMenu = new JMenuBar();
        jFileMenu = new JMenu();
        jConnectItem = new JMenuItem();
        jDisconnectItem = new JMenuItem();
        jExitBtn = new JMenu();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("The CSCI325 FTP Client");
        setMaximumSize(new Dimension(1024, 768));
        setMinimumSize(new Dimension(1024, 768));
        setName("mainFrame"); // NOI18N
        setPreferredSize(new Dimension(1024, 768));
        setSize(new Dimension(1024, 768));

        jTitle.setFont(new Font("Tekton Pro Cond", 1, 24)); // NOI18N
        jTitle.setText("The CSCI325 FTP Client");
        jTitle.setName("jTitle"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jConsole.setBackground(new Color(0, 0, 0));
        jConsole.setColumns(20);
        jConsole.setForeground(new Color(255, 255, 255));
        jConsole.setLineWrap(true);
        jConsole.setRows(5);
        jConsole.setToolTipText("");
        jConsole.setName("jConsole"); // NOI18N
        jScrollPane1.setViewportView(jConsole);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jRemoteTree.setName("jRemoteTree"); // NOI18N
        jScrollPane2.setViewportView(jRemoteTree);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jLocalTree.setName("jLocalTree"); // NOI18N

        jScrollPane3.setViewportView(jLocalTree);

        jLocalCopyBtn.setText("Copy");
        jLocalCopyBtn.setName("jLocalCopyBtn"); // NOI18N
        jLocalCopyBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jLocalCopyBtnActionPerformed(evt);
            }
        });

        jLocalPasteBtn.setText("Paste");
        jLocalPasteBtn.setName("jLocalPasteBtn"); // NOI18N
        jLocalPasteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jLocalPasteBtnActionPerformed(evt);
            }
        });

        jLocalChangeDirBtn.setText("CD Here");
        jLocalChangeDirBtn.setName("jLocalChangeDirBtn"); // NOI18N
        jLocalChangeDirBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jLocalChangeDirBtnActionPerformed(evt);
            }
        });

        jLocalDeleteBtn.setText("Delete");
        jLocalDeleteBtn.setName("jLocalDeleteBtn"); // NOI18N
        jLocalDeleteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jLocalDeleteBtnActionPerformed(evt);
            }
        });

        jCopyBtn.setText("Copy");
        jCopyBtn.setName("jCopyBtn"); // NOI18N
        jCopyBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCopyBtnActionPerformed(evt);
            }
        });

        jPasteBtn.setText("Paste");
        jPasteBtn.setName("jPasteBtn"); // NOI18N
        jPasteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jPasteBtnActionPerformed(evt);
            }
        });

        jChangeDirBtn.setText("Change Dir");
        jChangeDirBtn.setName("jChangeDirBtn"); // NOI18N
        jChangeDirBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jChangeDirBtnActionPerformed(evt);
            }
        });

        jDeleteBtn.setText("Delete");
        jDeleteBtn.setName("jDeleteBtn"); // NOI18N
        jDeleteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jDeleteBtnActionPerformed(evt);
            }
        });

        jRefreshBtn.setText("Refresh");
        jRefreshBtn.setName("jRefreshBtn"); // NOI18N
        jRefreshBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRefreshBtnActionPerformed(evt);
            }
        });

        jLocalLabel.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        jLocalLabel.setText("Local");
        jLocalLabel.setName("jLocalLabel"); // NOI18N

        jRemoteLabel.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        jRemoteLabel.setText("Remote");
        jRemoteLabel.setName("jRemoteLabel"); // NOI18N

        jMainMenu.setName("jMainMenu"); // NOI18N

        jFileMenu.setText("File");
        jFileMenu.setName("jFileMenu"); // NOI18N

        jConnectItem.setText("Connect");
        jConnectItem.setName("jConnectItem"); // NOI18N
        jConnectItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jConnectItemActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        jFileMenu.add(jConnectItem);

        jDisconnectItem.setText("Disconnect");
        jDisconnectItem.setName("jDisconnectItem"); // NOI18N
        jDisconnectItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jDisconnectItemActionPerformed(evt);
                } catch (IOException e) {
                    jConsole.append(e.getMessage() + "\n");
                }
            }
        });
        jFileMenu.add(jDisconnectItem);

        jMainMenu.add(jFileMenu);

        jExitBtn.setText("Exit");
        jExitBtn.setName("jExitBtn"); // NOI18N
        jExitBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jExitBtnActionPerformed(evt);
            }
        });

        setJMenuBar(jMainMenu);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 504, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLocalLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jLocalCopyBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLocalPasteBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLocalChangeDirBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLocalDeleteBtn)))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jRemoteLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jCopyBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jPasteBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jChangeDirBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jDeleteBtn)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jRefreshBtn)
                                                                .addGap(0, 73, Short.MAX_VALUE))
                                                        .addComponent(jScrollPane2)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTitle)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTitle)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLocalCopyBtn)
                                        .addComponent(jLocalPasteBtn)
                                        .addComponent(jLocalChangeDirBtn)
                                        .addComponent(jCopyBtn)
                                        .addComponent(jPasteBtn)
                                        .addComponent(jChangeDirBtn)
                                        .addComponent(jDeleteBtn)
                                        .addComponent(jLocalLabel)
                                        .addComponent(jRemoteLabel)
                                        .addComponent(jLocalDeleteBtn)
                                        .addComponent(jRefreshBtn))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2)
                                        .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>

    private void jConnectItemActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        String host, port, user, pass;

        // If there is no current connection info.
        if (!Main.isConnected()) {
                host = jDialog("IP: ", ipRegex);
                port = jDialog("Port: ", portRegex);
                user = jDialog("Username: ");
                pass = jDialog("Password: ");
                Main.setHost(host);
                Main.setPort(port);
                Main.setUserName(user);
                Main.setPassword(pass);
                jConsole.append(Main.connection.connect(host, Integer.parseInt(port), user, pass) + "\n");
                Main.isConnected = true;

        } else jConsole.append("There is already an established connection.\n");

    }

    private void jDisconnectItemActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        if (Main.isConnected){
            Main.commands.disconnect();
            jLocalTree.removeAll();
            jConsole.append("Disconnected from server.\n");
        } else {
            jConsole.append("There is no connection to disconnect.\n");
        }
    }

    private void jDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (jRemoteTree.getSelectionPath() != null && !jRemoteTree.getSelectionPath().toString().contains("Folder")){
            String[] path = jLocalTree.getAnchorSelectionPath().toString().split(", ");
            String fullPath = path[path.length - 1];
            fullPath = fullPath.substring(0, fullPath.length() - 1);
            try {
                Main.commands.remDel(fullPath);
            } catch (IOException e) {
                jConsole.append("Something went wrong while deleting the file.\n");
            }
        } else {
            jConsole.append("Something went wrong while deleting the file.\n");
        }
    }



    private void jLocalCopyBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (jLocalTree.getSelectionPath() != null){
            String[] path = jLocalTree.getAnchorSelectionPath().toString().split(", ");
            String fullPath = path[path.length - 1];
            fullPath = fullPath.substring(0, fullPath.length() - 1);
            localFile = new File(fullPath);

        }

    }

    private void jLocalPasteBtnActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void jLocalChangeDirBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (jLocalTree.getSelectionPath() != null){
            String[] path = jLocalTree.getAnchorSelectionPath().toString().split(", ");
            String fullPath = path[path.length - 1];
            fullPath = fullPath.substring(0, fullPath.length() - 1);
            Main.refreshTree(fullPath);
        }
    }

    private void jLocalDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (jLocalTree.getSelectionPath() != null){
            String[] path = jLocalTree.getAnchorSelectionPath().toString().split(", ");
            String fullPath = path[path.length - 1];
            fullPath = fullPath.substring(0, fullPath.length() - 1);
            File file = new File(fullPath);
            if (file.delete()){
                this.jConsole.append("File " + fullPath + " deleted.\n");
            } else {
                this.jConsole.append("Could not delete file " + fullPath + ".\n");
            }
        }

    }

    private void jCopyBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (jRemoteTree.getSelectionPath() != null && !jRemoteTree.getSelectionPath().toString().contains("Folder")){
            String path = jRemoteTree.getAnchorSelectionPath().toString();
            remoteFileCopy = path;
        } else {
            jConsole.append("Something went wrong while copying the file.\n");
        }
    }

    private void jPasteBtnActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            InputStream inputStream = new FileInputStream(localFile);
            remoteFile = new File("\\" + localFile.getName());
            Main.commands.uploadFile(inputStream, remoteFile.getPath());
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private void jChangeDirBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String[] path;
        if (jRemoteTree.getSelectionPath().toString().contains("(Folder)"));{
            path = jRemoteTree.getSelectionPath().toString().split(" ");
            try {
                Main.commands.setDir(path[0]);
                Main.refreshRemoteTree("");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void jRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {
            Main.refreshTree(Main.FINAL_DIR);
        if (Main.isConnected) {
            try {
                Main.refreshRemoteTree(Main.commands.getList(""));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void jExitBtnActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }


    public String jDialog()
    {
        String ret;
        JFrame frame = new JFrame("Info Required");
        ret = JOptionPane.showInputDialog(frame, "Connection Established!");
        return ret;
    }

    public String jDialog(String req)
    {
        String ret;
        JFrame frame = new JFrame("Info Required");
        ret = JOptionPane.showInputDialog(frame, req);

        return ret;
    }
        public String jDialog(String req, Pattern reg)
        {
            boolean complete = false;
            String ret = null;

            while (!complete){

                JFrame frame = new JFrame("Info Required");
                ret = JOptionPane.showInputDialog(frame, req);
                if (reg.matcher(ret).matches()){
                    complete = true;
                } else if (reg.equals("") && !ret.equals("")) {
                    complete = true;
                } else {
                    req = "Please input a correct value";
                }
            }
            return ret;
        }

}

